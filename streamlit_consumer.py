import streamlit as st
from confluent_kafka import Consumer
import threading
import time
import json
from datetime import datetime,timedelta
from cassandra.cluster import Cluster
import requests
from PIL import Image
from io import BytesIO
import pandas as pd

# Configuration de Cassandra
CASSANDRA_HOST = 'cassandra'
CASSANDRA_PORT = 9042
CASSANDRA_KEYSPACE = 'weather_data'  # Remplace par ton keyspace

# Dictionnaire pour stocker les donn√©es Kafka en temps r√©el
kafka_data = {}

# Fonction pour consommer les donn√©es de Kafka et les stocker dans un dictionnaire
def consume_kafka_data(event):
    consumer_config = {
        'bootstrap.servers': 'kafka-projet-meteo:9092',
        'group.id': 'test',
        'auto.offset.reset': 'earliest'
    }
    
    consumer = Consumer(consumer_config)
    consumer.subscribe(['meteo_api_topic'])
    
    while not event.is_set():
        message = consumer.poll(0.2)
        
        if message is None:
            continue
        if message.error():
            print(f"Error: {message.error()}")
            continue
        
        record_key = message.key()
        record_value = message.value()
        data = json.loads(record_value)
        print("Message re√ßu : ", data)

        # Mettre √† jour le dictionnaire avec les nouvelles donn√©es
        kafka_data[record_key] = data
        print("Data transf√©r√©e \n")

def start_kafka_consumer():
    event = threading.Event()
    kafka_thread = threading.Thread(target=consume_kafka_data, args=(event,))
    kafka_thread.start()
    timer = threading.Timer(60.0, event.set)
    timer.start()

# Fonction pour r√©cup√©rer les donn√©es historiques de Cassandra
def fetch_historical_data(ville):
    data = None
    cluster = Cluster([CASSANDRA_HOST], port=CASSANDRA_PORT)
    varConteur = 0
    while varConteur <= 10 : 
        try : 
            session = cluster.connect()
            session.set_keyspace(CASSANDRA_KEYSPACE)
            break
        except Exception as e:
            # Print the error and retry after a delay
            print(f"Erreur de connexion √† Cassandra : {e}")
            print("Retrying in 5 seconds...")
            time.sleep(30) # Wait for 5 seconds before retrying
        finally:
            varConteur+=1
            
        
    # Calculer le timestamp il y a 12 heures
    twelve_hours_ago = datetime.now() - timedelta(hours=12)
    
    # Requ√™te CQL pour obtenir les donn√©es des 12 derni√®res heures
    query = f"""
    SELECT * FROM weather_data_table
    WHERE Ville = '{ville}'
    AND Date >= '{twelve_hours_ago.strftime("%Y-%m-%d %H:%M:%S")}'
    ALLOW FILTERING;
    """
    rows = session.execute(query).all()
    
    if len(rows) > 0 :
        # Convertir les r√©sultats en liste de dictionnaires
        data = [row._asdict() for row in rows] if rows else None
        #print("la data histo :",data,"\n")
        # Convertir le timestamp en format lisible si n√©cessaire
        for entry in data:
            #print("the entry : ", entry, "\n")
            if 'date' in entry:
                entry['date'] = entry['date'].strftime('%Y-%m-%d %H:%M:%S')
            

    return data

def get_weather_image(icon_data) : 
    try:
        image_url = f"https://openweathermap.org/img/wn/{icon_data}@4x.png"
        response = requests.get(image_url)
        response.raise_for_status()  # L√®ve une exception si la requ√™te a √©chou√©
        img = Image.open(BytesIO(response.content))
        resized_img = img.resize((100, 100))  # Width, Height
        return resized_img
    except requests.exceptions.RequestException as e:
        print(f"Erreur lors de la requ√™te : {e}")
        return None
    except Exception as e:
        print(f"Erreur inattendue : {e}")
        return None

# Fonction d'affichage encapsul√©e
def display_data(co_1):
    # Liste des villes
    cities = ['Paris', 'Marseille', 'Rennes', 'Nice']

    #cities = kafka_data.keys()
    print("les villes :", cities,'\n')
    if cities :
        for i in range(0, len(cities), 2):
            cols = st.columns(2)  # Diviser l'affichage en 2 colonnes √©gales

            for j, city in enumerate(cities[i:i+2]):
                with cols[j]:
                    # R√©cup√©rer les donn√©es de Kafka pour cette ville
                    city_data = kafka_data.get(city.encode(), {})

                    if not city_data:
                        st.write(f"Aucune donn√©e disponible pour {city}")
                    else : 

                        # Extraire les valeurs actuelles des donn√©es
                        latest_temp = city_data.get('Temperature', 'N/A')
                        latest_date = city_data.get('Date', 'N/A')
                        latest_ville = city_data.get('Ville', 'N/A')
                        latest_feels_like = city_data.get('Feels_Like', 'N/A')
                        latest_min_temp = city_data.get('Min_Temperature', 'N/A')
                        latest_max_temp = city_data.get('Max_Temperature', 'N/A')
                        latest_humidity = city_data.get('Humidity', 'N/A')
                        latest_pressure = city_data.get('Pressure', 'N/A')
                        latest_wind_speed = city_data.get('Wind_Speed', 'N/A')
                        latest_wind_direction = city_data.get('Wind_Direction', 'N/A')
                        latest_weather = city_data.get('Weather_Descr', 'N/A')
                        icon = city_data.get('Icon', 'N/A')

                        # Obtenir l'URL de l'ic√¥ne m√©t√©o
                        weather_icon_image = get_weather_image(icon)

                        # Titre avec l'heure actuelle et ic√¥ne m√©t√©o
                        st.markdown(f"## üìç {latest_ville} - {latest_date}")
                        st.image(weather_icon_image,use_column_width=False)

                        # Ajouter les m√©triques
                        col1, col2, col3 = st.columns(3)

                        with col1:
                            st.metric(label="üå°Ô∏è Temp√©rature Actuelle", value=f"{latest_temp}¬∞C")
                            st.metric(label="üå°Ô∏è Temp√©rature Min", value=f"{latest_min_temp}¬∞C")
                            st.metric(label="üå°Ô∏è Temp√©rature Max", value=f"{latest_max_temp}¬∞C")
                        with col2:
                            st.metric(label="üíß Humidit√©", value=f"{latest_humidity}%")
                            st.metric(label="üå¨Ô∏è Vitesse du Vent", value=f"{latest_wind_speed} m/s")
                            st.metric(label="üß≠ Direction du Vent", value=f"{latest_wind_direction}¬∞")
                        with col3:
                            st.metric(label="üå°Ô∏è Temp. Ressentie", value=f"{latest_feels_like}¬∞C")
                            st.metric(label="üîµ Pression", value=f"{latest_pressure} hPa")
                            st.metric(label="üå¶Ô∏è Description", value=latest_weather)
                    #if (co_1 == 0 or co_1 == 4) : 
                        #co_1 = 0
                        # Afficher l'historique sous forme de tableau large
                    st.subheader(f"Historique des 30 derniers jours - {city}")
                    historical_data = fetch_historical_data(city)
                    if historical_data:
                        # Convertir les donn√©es historiques en DataFrame et afficher
                        df = pd.DataFrame(historical_data)
                        st.dataframe(df, use_container_width=True)
                    else:
                        st.write("Pas de donn√©es historiques disponibles")
                        #co_1 = co_1 + 1
                    #else : 
                        #co_1 = co_1 + 1
                    st.markdown("---")

# Fonction principale pour ex√©cuter l'application Streamlit
def main():
    start_kafka_consumer()

    # PLUS DE LARGEUR 
    st.set_page_config(layout="wide")
    # Cr√©er un conteneur vide pour les mises √† jour des donn√©es
    placeholder = st.empty()
    co_1 = 0
    while True:
        with placeholder.container():
            st.title("Tableau de bord m√©t√©o en temps r√©el")
            display_data(co_1)
        # D√©lai entre les mises √† jour (en secondes)
        time.sleep(5)

if __name__ == "__main__":
    main()
